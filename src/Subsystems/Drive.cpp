// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drive.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/driveCmd.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drive::Drive() : Subsystem("Drive") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftMotor1 = RobotMap::driveleftMotor1;
    leftMotor2 = RobotMap::driveleftMotor2;
    rightMotor1 = RobotMap::driverightMotor1;
    rightMotor2 = RobotMap::driverightMotor2;
    robotDrive41 = RobotMap::driveRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	g = new ADXRS450_Gyro(SPI::Port::kOnboardCS0);
	//acc = new BuiltInAccelerometer();
}

void Drive::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new driveCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Drive::driveMethod(double left, double right) {
	Robot::drive->leftMotor1->Set(left);
	Robot::drive->leftMotor2->Set(left);
	Robot::drive->rightMotor1->Set(right);
	Robot::drive->rightMotor2->Set(right);
}

double Drive::getGAngle() {
	return Robot::drive->g->GetAngle();
}

void Drive::ResetGyro() {
	 Robot::drive->g->Reset();
}

void Drive::SetExp() {
	leftMotor1->SetExpiration(5000);
	leftMotor1->SetSafetyEnabled(false);
	leftMotor2->SetExpiration(5000);
	leftMotor2->SetSafetyEnabled(false);
	rightMotor1->SetExpiration(5000);
	rightMotor1->SetSafetyEnabled(false);
	rightMotor2->SetExpiration(5000);
	rightMotor2->SetSafetyEnabled(false);
	robotDrive41->SetExpiration(5000);
	robotDrive41->SetSafetyEnabled(false);
}

void Drive::RobotDriveDrive(float magn, float curve) {
	// robotDrive41->Drive(magn, curve);
	robotDrive41->ArcadeDrive(magn,curve);
}

void Drive::ResetEncoders() {
		Robot::drive->leftMotor2->SetEncPosition(0);
		Robot::drive->rightMotor2->SetEncPosition(0);
}

bool Drive::CompareEncoders() {
	if (Robot::drive->leftMotor2->GetEncPosition() >= 100000 && Robot::drive->rightMotor2->GetEncPosition() >= 100000) {
		return true;
	}
	return false;
}

double Drive::getLeftEncPos() {
	return Robot::drive->leftMotor2->GetEncPosition();
}

double Drive::getRightEncPos() {
	return Robot::drive->rightMotor2->GetEncPosition();
}

void Drive::differenceMethod(double speed, double difference) {
	if (Robot::drive->getGAngle() > 2) {
		//veering right
		Robot::drive->leftMotor1->Set(-(speed-(difference*0.01)));
		Robot::drive->rightMotor1->Set(-(speed+(difference*0.01)));
		Robot::drive->leftMotor2->Set(-(speed-(difference*0.01)));
		Robot::drive->rightMotor2->Set(-(speed+(difference*0.01)));
	} else if (Robot::drive->getGAngle() < -2) {
		//veering left
		Robot::drive->leftMotor1->Set(-(speed-(difference*0.01)));
		Robot::drive->rightMotor1->Set(-(speed+(difference*0.01)));
		Robot::drive->leftMotor2->Set(-(speed-(difference*0.01)));
		Robot::drive->rightMotor2->Set(-(speed+(difference*0.01)));
	} else {
		Robot::drive->leftMotor1->Set(-speed);
		Robot::drive->rightMotor1->Set(-speed);
		Robot::drive->leftMotor2->Set(-speed);
		Robot::drive->rightMotor2->Set(-speed);
	}
}

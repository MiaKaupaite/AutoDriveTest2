// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "autoGoForward.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

autoGoForward::autoGoForward(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void autoGoForward::Initialize() {
	SetTimeout(5);
	Robot::drive->ResetGyro();
	Robot::drive->SetExp();
	Robot::drive->ResetEncoders();
}

// Called repeatedly when this Command is scheduled to run
void autoGoForward::Execute() {
	SmartDashboard::PutNumber("Left Motor .3 shoved left", -.3-(Robot::drive->getGAngle()*0.01));
	SmartDashboard::PutNumber("Right Motor Speed shoved left", .3+(Robot::drive->getGAngle()*0.01));
	SmartDashboard::PutNumber("Left Motor Speed shoved right", -.3+(Robot::drive->getGAngle()*0.01));
	SmartDashboard::PutNumber("Right Motor Speed shoved right", .3-(Robot::drive->getGAngle()*0.01));
	SmartDashboard::PutNumber("Gyro Position", Robot::drive->getGAngle());
	Robot::drive->straightAutonMethod(.5, 1000);
}

// Make this return true when this Command no longer needs to run execute()
bool autoGoForward::IsFinished() {

	if (IsTimedOut() || Robot::drive->CompareEncoders()) {
		return true;
	}
    return false;
}

// Called once after isFinished returns true
void autoGoForward::End() {
	Robot::drive->driveMethod(0,0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void autoGoForward::Interrupted() {

}
